package com.irandubamodulo01.daoimpl;

import java.text.SimpleDateFormat;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.AliasToBeanResultTransformer;

import com.irandubamodulo01.annotation.Transactional;
import com.irandubamodulo01.dao.PagamentoDAO;
import com.irandubamodulo01.enumerated.StatusCompra;
import com.irandubamodulo01.model.Compra;
import com.irandubamodulo01.model.Fornecedor;
import com.irandubamodulo01.model.Pagamento;
import com.irandubamodulo01.model.TipoPagamento;
import com.irandubamodulo01.util.Filtro;


public class PagamentoDAOImpl extends DAOimpl<Pagamento, Long> implements PagamentoDAO{

	
	private EntityManager em;
	
	@Inject
    public PagamentoDAOImpl(EntityManager em) {
	   this.em = em;
	}
	
	@Override
	public List<Pagamento> getPagamentoPorFornecedorEtipo(Fornecedor fornecedor) {
		String jpql = "select p from Pagamento p where p.compra.fornecedor.id = :id and tipoPagamento = :adiantamento";
		Query query = em.createQuery(jpql);  
		query.setParameter("id", fornecedor.getId().longValue());
		query.setParameter("adiantamento", TipoPagamento.ADIANTAMENTO);
		return query.getResultList();
	}
	
	@Override
	public List<Pagamento> getPagamentoPorCompra(Compra compra){
		String jpql = "select p from Pagamento p where p.compra.id = :id";
		Query query = em.createQuery(jpql);  
		query.setParameter("id", compra.getId().longValue());
		return query.getResultList();
	}

	@Override
	public List<Pagamento> getPagamentoPorCompraSemTransferencia(Compra compra){
		String jpql = "select p from Pagamento p where p.compra.id = :id and p.tipoPagamento <> '" + TipoPagamento.TRANSFERENCIA + "'";
		Query query = em.createQuery(jpql);
		query.setParameter("id", compra.getId().longValue());
		return query.getResultList();
	}

	@Override
	@Transactional
	public void removePagamentosPorCompra(Compra compra) {
		String jpql = "delete  from Pagamento  where compra.id = :id";
		Query query = em.createQuery(jpql);  
		query.setParameter("id", compra.getId().longValue());
		query.executeUpdate();
	}
	
	@Override
	public int quantidadeFiltrados(Filtro filtro){
		 Criteria criteria = criarCriteria(filtro);
		 criteria.setProjection(Projections.rowCount());
		 return ((Number)criteria.uniqueResult()).intValue();
	}
	
	private Criteria criarCriteria(Filtro filtro){
		Session session = em.unwrap(Session.class);
		Criteria criteria = session.createCriteria(Pagamento.class, "p");
		criteria.setProjection(Projections.projectionList()
				.add(Projections.property("p.id").as("id"))
				.add(Projections.property("p.valor").as("valor"))
				.add(Projections.property("p.pendente").as("pendente"))
				.add(Projections.property("p.autorizado").as("autorizado"))
				.add(Projections.property("p.tipoPagamento").as("tipoPagamento"))
				.add(Projections.property("p.dataPagamento").as("dataPagamento"))
				.add(Projections.property("p.compra").as("compra"))
				.add(Projections.property("p.conta").as("conta")));

		criteria.add(Restrictions.eq("tipoPagamento", TipoPagamento.TRANSFERENCIA));
		
		if (filtro.getPendente() != null)
			criteria.add(Restrictions.eq("pendente", filtro.getPendente()));
		
		criteria.createAlias("compra", "c");

		criteria.add(Restrictions.eq("c.status", true));
		criteria.add(Restrictions.eq("c.pause", false));
		criteria.add(Restrictions.eq("c.autorizado", true));
		
		if (filtro.getNome() != null && !filtro.getNome().equals("")) {
			criteria.createAlias("compra.fornecedor", "f");
			criteria.add(Restrictions.disjunction());
			criteria.add(Restrictions.ilike("f.nome", filtro.getNome(), MatchMode.ANYWHERE)); 
		}


		
		if (filtro.getDataInicio() != null && filtro.getDataFinal() != null){
			criteria.add(Restrictions.between("c.dataCompra", filtro.getDataInicio(), filtro.getDataFinal()));
		}else if (filtro.getDataInicio() != null && filtro.getDataFinal() == null){
			criteria.add(Restrictions.sqlRestriction("to_char(c1_.datacompra, 'dd/MM/yyyy') = '" + new SimpleDateFormat("dd/MM/yyyy").format(filtro.getDataInicio()) + "'"));
		}else if (filtro.getDataInicio() == null && filtro.getDataFinal() != null){
			criteria.add(Restrictions.sqlRestriction("to_char(c1_.datacompra, 'dd/MM/yyyy') = '" + new SimpleDateFormat("dd/MM/yyyy").format(filtro.getDataFinal()) + "'"));
		}
		
		return criteria;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Pagamento> filtrados(Filtro filtro){
		
		Criteria criteria =  criarCriteria(filtro);
		
		criteria.setFirstResult(filtro.getPrimeiroRegistro());
		criteria.setMaxResults(filtro.getQuantidadeRegistros());
		
		if (filtro.isAscendente() && filtro.getPropriedadeOrdenacao() != null) {
			criteria.addOrder(Order.asc(filtro.getPropriedadeOrdenacao()));
		}else if (filtro.getPropriedadeOrdenacao() != null) {
			criteria.addOrder(Order.desc(filtro.getPropriedadeOrdenacao()));
		}
		
		criteria.setResultTransformer(new AliasToBeanResultTransformer(Pagamento.class));
		
		return criteria.list();
	}

	@Override
	public Integer obterQtdePagamentosPendentes(){
		String sql = "select count(*) from pagamento p join compra c on c.id = p.compra_id " +
						" where p.pendente = true and p.tipopagamento = 'TRANSFERENCIA' " +
						" and c.status = true and c.pause = false and c.autorizado = true";
		Query query = em.createNativeQuery(sql);
		Object object = query.getSingleResult();
		return object != null ? Integer.parseInt(object.toString()) : 0;
	}
	
}
